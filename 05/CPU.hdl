// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
//a register input: constant instruction if A instruction 
Mux16(a=instruction ,b=aluoutput ,sel=instruction[15] ,out=inputa );

// set a register
Not(in=instruction[15] ,out=ainstruct );
Or(a=ainstruct ,b=instruction[5] ,out=loada ); // first destination of C instruction
ARegister(in=inputa ,load=loada ,out=areg ,out[0..14]=addressM );

// set d register
And(a=instruction[15] ,b=instruction[4] ,out=loadd ); // destination two of C instruction
DRegister(in=aluoutput ,load=loadd ,out=dreg );



// read from memory or a register
Mux16(a=areg ,b=inM ,sel=instruction[12] ,out=aluinput );

// sets ALU with control bits
ALU(
  //inputs
  x=dreg ,
  y=aluinput ,
  zx=instruction[11] , 
  nx=instruction[10] , 
  zy=instruction[9] ,  
  ny=instruction[8] , 
  f=instruction[7] ,   
  no=instruction[6] ,  

  /outputs
  out=aluoutput ,
  out=outM ,
  zr=zero ,
  ng=negative

);

// writeM if c instruction with third destination
And(a=instruction[15] ,b=instruction[3] ,out=writeM );

// deciding jumps with program counter

Not(in=negative ,out=notnegative );
Not(in=zero ,out=notzero );
And(a=notnegative ,b=notzero ,out=positive );

And(a=instruction[2] ,b=negative ,out=jumpnegative ); //jump option 1
And(a=instruction[1] ,b=zero ,out=jumpzero ); //jump option 2
And(a=instruction[0] ,b=positive ,out=jumppositive ); //jump option 3

Or8Way(in[0]=jumpnegative ,in[1]=jumpzero ,in[2]=jumppositive ,out=jumpcinstruct ); // decide jump

And(a=instruction[15] ,b=jumpcinstruct ,out=jump); //c instruction â€”> jump

PC(in=areg ,load=jump ,inc=true ,reset=reset ,out[0..14]=pc); //increment program counter or load new value from a register
 
}